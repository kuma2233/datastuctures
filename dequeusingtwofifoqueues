import java.util.LinkedList;
import java.util.Queue;

public class DequeUsingQueues<T> {
    private Queue<T> queue1;
    private Queue<T> queue2;

    public DequeUsingQueues() {
        this.queue1 = new LinkedList<>();
        this.queue2 = new LinkedList<>();
    }
    public void addLast(T item) {
        queue2.offer(item);
    }
    public void addFirst(T item) {
        queue1.offer(item);
    }
    public T removeLast() {
        if (queue2.isEmpty()) {
            while (queue1.size() > 1) {
                queue2.offer(queue1.poll());
            }
            return queue1.poll();
        }
        return queue2.poll();
    }
    public T removeFirst() {
        if (queue1.isEmpty()) {
            while (queue2.size() > 1) {
                queue1.offer(queue2.poll());
            }
            return queue2.poll();
        }
        return queue1.poll();
    }
    public T peekFirst() {
        if (queue1.isEmpty()) {
            while (queue2.size() > 1) {
                queue1.offer(queue2.poll());
            }
            return queue2.peek();
        }
        return queue1.peek();
    }
    public T peekLast() {
        if (queue2.isEmpty()) {
            while (queue1.size() > 1) {
                queue2.offer(queue1.poll());
            }
            return queue1.peek();
        }
        return queue2.peek();
    }

    public boolean isEmpty() {
        return queue1.isEmpty() && queue2.isEmpty();
    }

    public static void main(String[] args) {
        DequeUsingQueues<Integer> deque = new DequeUsingQueues<>();

        deque.addLast(10);
        deque.addFirst(20);
        deque.addLast(30);

        System.out.println(deque.removeFirst()); 
        System.out.println(deque.removeLast()); 
        System.out.println(deque.removeLast()); 
    }
}
